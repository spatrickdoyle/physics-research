#!/usr/bin/env python2

#CGI script to create an HTML page for displaying graphs generated by Bo Ting's Mathematica script
#Written by Sean Doyle in 2017 for the Southern Methodist University theoretical physics research lab

#TODO:
#Update all parameters
#Create seperate page for output
#Make the form update dynamically while parameters are being entered
#Make graph scalable (user can change axis bounds)
#Make history box
#Test with AWS
#Remove CGI debugging stuff

# Import module for CGI handling 
import cgi

#Object wrappers for Google Material Design components
import mdl

#For debugging - remove or comment when complete
import cgitb
cgitb.enable()

#Other things
import glob,os,time

VERSION = '16' #Version of the Mathematica script
ASSETS = '../assets/' #Path to HTML page assets
MATH = './' #Path to Mathematica script bin
OUTPUT = '../plots/Jobs/' #Path to output directory - the script will create a separate  folder here for each unique job ID
JS_PREFIX = '../mathscript_v%s/bin/'%VERSION

CONFIG = 'config1.txt' #Name of config file to be generated in the Mathematica script bin directory
EXPIDS = 'exptidname_inconfig.txt'
IMAGE = '/exptname_table.png'

#Set current working directory - this line is necessary on my localhost but not on the server for reasons currently unknown to me
#os.chdir("/home/sean/Programs/git-repos/physics-research/mathscript_v16/bin")
os.chdir("../mathscript_v%s/bin"%VERSION)


def TAB(num):
    #TAB(int num)
    #num: number of indentations
    #return: a string of whitespace of length num*4
    #Generates a string of num tabs, for formatting the generated HTML nicely

    return ('    '*num)

def makeConfig(boxes,radios,texts,selects,expids):
    #makeConfig(List boxes, List radios, List texts)
    #boxes: list of mdl CheckBox elements
    #radios: list of mdl RadioBox elements
    #texts: list of mdl Text elements
    #selects: list of drop down menu elements
    #expids: list of experiment ids to include in the config file
    #return: the job ID associated with the submission
    #Generates and writes the configuration file for the given set of parameters

    #Open the file itself
    configFile = open(MATH+CONFIG,'w+')
    #Write the version of the Mathematica script
    configFile.write("#Version %s\n"%VERSION)
    #Write the timestamp
    configFile.write(time.strftime("#%X %x\n\n"))

    #Generate the job ID
    boxStr = str(int(''.join([str(int(box.getState())) for box in boxes])))

    radStr = str(int(''.join([str(rad.getState()) for rad in radios])))

    textStr = ''.join([t.getState() for t in texts])

    jobID = str(int(sum([ord(i)-45 for i in (boxStr+radStr+textStr)])))

    #Job ID
    configFile.write("Job ID (copy from the counter file): %s\n"%jobID)

    #PDF set
    configFile.write("PDF set: CT14NNLO\n\n")

    #Generate the sections for figure to plot, experiments to include, and functions to use
    typestr = ""
    flagstr = ""
    funcstr = ""
    figures = []
    for box in boxes[exp_boxes:exp_boxes+fig_boxes]:
        typestr += "     %d"%box.getState()
        figures.append(box.getState())
    for box in boxes[1:exp_boxes]:
        flagstr += "     %d"%box.getState()
    for box in boxes[exp_boxes+fig_boxes:exp_boxes+fig_boxes+func_boxes]:
        funcstr += "%d     "%box.getState()

    #Type
    configFile.write("Type:  1     2     3     4     5     6     7\n")
    #Flag
    configFile.write("Flag:%s     0\n\n"%(typestr[3:]))

    #Expt. ID
    configFile.write("Expt. ID:   "+''.join([i[0]+"   " for i in expids])+"\n")
    #Expt. Flag
    configFile.write("Expt. Flag:%s\n\n"%(flagstr[3:]))

    #Type
    configFile.write("Type:  bb   cb   sb     db    ub     g     u     d     s     c     b    q6   q7    q8   user\n")
    #Flag
    configFile.write("Flag:  %s\n\n"%funcstr)

    #Name
    configFile.write("Name: %s\n"%texts[20].getState())
    #Values
    configFile.write("Values: %s\n\n"%texts[21].getState())

    bounds = []
    for t in texts[22:29]:
        bounds.append(t.getState())

    for i in range(exp_boxes+fig_boxes+func_boxes,exp_boxes+fig_boxes+func_boxes+auto_boxes):
        if boxes[i].getState():
            bounds[i-(exp_boxes+fig_boxes+func_boxes)] = 'auto'

    configFile.write("xmin,   xmax:  %s   %s\n"%(bounds[0],bounds[1]))
    configFile.write("mumin, mumax:      %s %s\n\n"%(bounds[2],bounds[3]))

    configFile.write("Number of bins: %s\n"%(bounds[4]))
    configFile.write("xmin, xmax: %s  %s\n"%(bounds[5],bounds[6]))
    configFile.write("ymin, ymax:  0 auto\n\n")

    configFile.write("Color by data percentage: 50 70 85\n\n")

    configFile.write("Type:  1     2     3     4     5     6     7\n")
    configFile.write("Mode:  0     %d     %d     %d     %d     %d     0\n"%(selects[0].getState(),selects[1].getState(),selects[2].getState(),selects[3].getState(),selects[4].getState()))

    configFile.write("Mode 1 range: 0.0  0.0 %s  %s %s  %s %s  %s %s  %s %s  %s 0.0  0.0\n"%(texts[0].getState(),texts[1].getState(),texts[4].getState(),texts[5].getState(),texts[8].getState(),texts[9].getState(),texts[12].getState(),texts[13].getState(),texts[16].getState(),texts[17].getState()))
    configFile.write("Mode 2 range: 0.0  0.0 %s  %s %s  %s %s  %s %s  %s %s  %s 0.0  0.0\n\n"%(texts[2].getState(),texts[3].getState(),texts[6].getState(),texts[7].getState(),texts[10].getState(),texts[11].getState(),texts[14].getState(),texts[15].getState(),texts[18].getState(),texts[19].getState()))

    configFile.write("Size: %s\n\n"%(radios[1].labels[int(radios[1].getState())].lower()))


    configFile.close()

    #IMAGE = []
    #obsname = ["xQbyexpt","expt_error_ratio","residue","dr","corrdr","corr"]
    #for i in range(6):
    #    if figures[i]:
    #        IMAGE.append(obsname[i]+"_xQ.png")
    #return (jobID,IMAGE)
    return jobID

def makeGraph(jobID):
    #makeGraph(string jobID)
    #jobID: the ID of the job that is invoking the Mathematica script
    #Make a lockfile, invoke the Mathematica script, wait until the graph has been generated, and display it

    #Create lockfile containing job ID of the image being generated
    lockfile = file(MATH+'lock','w+')
    lockfile.write("%s\n%s\n%s\n%s\n"%(jobID,time.strftime("%X %x"),os.environ["REMOTE_ADDR"],os.environ['HTTP_USER_AGENT']))#Write job ID, time and date of creation, invoking host ip, and user agent 
    lockfile.close()

    #Invoke the program
    os.system("math -script "+MATH+"correlation_plot_project_v"+VERSION+"_script.m > log.txt&")

    #Check every 2 seconds to see if the graph is done being generated, and display it when it is
    path = JS_PREFIX+OUTPUT+jobID+IMAGE
    #print TAB(2)+"<img id='graph' src='"+ASSETS+"state_loading.jpg'/><br/>\n"
    print TAB(2)+"<h3 id='graph'>Loading...<h3/><br/>\n"
    #print TAB(2)+"""<script>var loop = setInterval(function() { if (UrlExists("%s")) { clearInterval(loop); document.getElementById('graph').src = "%s"; }; }, 2000);</script>"""%(path,path)
    print TAB(2)+"""<script>var loop = setInterval(function() { if (UrlExists("%s")) { clearInterval(loop); document.getElementById('graph').innerHTML = "<a onclick='window.location.reload()'>Click to view plots</a>"; }; }, 2000);</script>"""%(path)


#Create all the input elements that will be on the page

#Generate list of experiment IDs and their associated string names (currently 111 elements long)
idFile = file(MATH+EXPIDS,'r')
expids = [i.split() for i in idFile.readlines()]
expids = [i for i in expids if len(i) != 0]

#Checkboxes
exp_boxes = 41
fig_boxes = 6
func_boxes = 15
auto_boxes = 4
boxes = [
    #Experiments to include [0:38]
    mdl.CheckBox('allexps','All',False,'expid','checkAllExps();') #'Select all' box
 ]+[mdl.CheckBox(i[0],i[1],False,'expid') for i in expids]+[

    #Figures to plot [111:117]
    mdl.CheckBox('type1','Experimental data points',False),
    mdl.CheckBox('type2','Experimental errors',False,None,"toggleBlock2('highlight0')"),
    mdl.CheckBox('type3','Residuals',False,None,"toggleBlock2('highlight1')"),
    mdl.CheckBox('type4','PDF errors on residuals',False,None,"toggleBlock2('highlight2')"),
    mdl.CheckBox('type5','Sensitivity factor',False,None,"toggleBlock2('highlight3')"),
    mdl.CheckBox('type6','Correlation',False,None,"toggleBlock2('highlight4')"),

    #Functions to use [117:132]
    mdl.CheckBox('func1','b<span class="bar">&#x203e;</span>',False),
    mdl.CheckBox('func2','c<span class="bar">&#x203e;</span>',False),
    mdl.CheckBox('func3','s<span class="bar">&#x203e;</span>',False),
    mdl.CheckBox('func4','d<span class="bar">&#x203e;</span>',False),
    mdl.CheckBox('func5','u<span class="bar">&#x203e;</span>',False),
    mdl.CheckBox('func6','g',False),
    mdl.CheckBox('func7','u',False),
    mdl.CheckBox('func8','d',False),
    mdl.CheckBox('func9','s',False),
    mdl.CheckBox('func10','c',False),
    mdl.CheckBox('func11','b',False),
    mdl.CheckBox('func12','q6',False),
    mdl.CheckBox('func13','q7',False),
    mdl.CheckBox('func14','q8',False),
    mdl.CheckBox('func15','user',False,None,"toggleBlock2('user')"),

    #Figure range 'auto' boxes [132:136]
    mdl.CheckBox('xauto','Auto',True,None,"toggleBlock2('auto1')"),
    mdl.CheckBox('muauto','Auto',True,None,"toggleBlock2('auto2')"),
    mdl.CheckBox('hxauto','Auto',True,None,"toggleBlock2('auto3')"),
    mdl.CheckBox('yauto','Auto',True,None,"toggleBlock2('auto4')")
]

#Radio buttons
radios = [
    #PDF set [0]
    mdl.RadioBox('pdfset',['CT14NNLO']),

    #Point size [1]
    mdl.RadioBox('pointsize',['Tiny','Small','Medium','Large'])
]

#Text inputs
texts = [
    #Value and percentage ranges for highlight mode functions 2-6 [0:20]
    mdl.Text('vmin2','Min',1,0.0),
    mdl.Text('vmax2','Max',1,0.0),
    mdl.Text('pmin2','Min',1,0.0),
    mdl.Text('pmax2','Max',1,0.0),
    mdl.Text('vmin3','Min',1,0.0),
    mdl.Text('vmax3','Max',1,0.0),
    mdl.Text('pmin3','Min',1,0.0),
    mdl.Text('pmax3','Max',1,0.0),
    mdl.Text('vmin4','Min',1,0.0),
    mdl.Text('vmax4','Max',1,0.0),
    mdl.Text('pmin4','Min',1,0.0),
    mdl.Text('pmax4','Max',1,0.0),
    mdl.Text('vmin5','Min',1,0.0),
    mdl.Text('vmax5','Max',1,0.0),
    mdl.Text('pmin5','Min',1,0.0),
    mdl.Text('pmax5','Max',1,0.0),
    mdl.Text('vmin6','Min',1,0.0),
    mdl.Text('vmax6','Max',1,0.0),
    mdl.Text('pmin6','Min',1,0.0),
    mdl.Text('pmax6','Max',1,0.0),

    #User function parameter [20:22]
    mdl.Text('userparamname','Name',0),
    mdl.Text('57values','Enter 57 values',0),

    #Window bounds for graph [22:31]
    mdl.Text('xmin','X-min',1,0.00001),
    mdl.Text('xmax','X-max',1,1),
    mdl.Text('mumin','&#x03bc;-min',1,1.0),
    mdl.Text('mumax','&#x03bc;-max',1,2000),
    mdl.Text('nbin','Nbin',1,20),
    mdl.Text('hxmin','X-min',1,-3),
    mdl.Text('hxmax','X-max',1,3),
    mdl.Text('ymin','Y-min',1,0),
    mdl.Text('ymax','Y-max',1,10)
]

#Select elements
selects = [
    #Dropdowns for highlight mode (figures 2-6) [0:5]
    #mdl.Select('wtype1',['No highlighting','Value range','Percentage range']),
    mdl.Select('wtype2',['No highlighting','Value range','Percentage range']),#,"changeFunc('s1')","s1"),
    mdl.Select('wtype3',['No highlighting','Value range','Percentage range']),
    mdl.Select('wtype4',['No highlighting','Value range','Percentage range']),
    mdl.Select('wtype5',['No highlighting','Value range','Percentage range']),
    mdl.Select('wtype6',['No highlighting','Value range','Percentage range'])
]

#Buttons
buttons = [
    mdl.Button('button1','SUBMIT'), #[0]
    mdl.Button('button2','RESET','resetbutton') #[1]
]


#Get data from submitted form
form = cgi.FieldStorage()


#Print packet header
print "Content-type:text/html\r\n"

#The HTML bit
#Source file head
print "<html>"

print TAB(1)+"<head>"
print TAB(2)+"<title>Physics test page</title>\n"

#Google Material Design stylesheets
print TAB(2)+"<link rel='stylesheet' href='%sct66.css'>"%ASSETS
print TAB(2)+"<link rel='stylesheet' href='%smdl/material.min.css'>"%ASSETS
print TAB(2)+"<script src='%smdl/material.min.js'></script>"%ASSETS
print TAB(2)+"<link rel='stylesheet' href='%smdl/icon.css'>"%ASSETS

#Other resources
print TAB(2)+"<link rel='stylesheet' href='%sindex.css'>"%ASSETS
print TAB(2)+"<script src='%sindex.js'></script>"%ASSETS

print TAB(1)+"</head>"

print TAB(1)+"<body>"
print TAB(2)+"<h1>LHC Particle Distributions</h1>"
print TAB(2)+"<h2>Southern Methodist University Physics Department</h2>\n"

#Update input elements based on previous form submission
if len(form) != 0:
    for box in boxes:
        box.checkState(form)
    for rad in radios:
        rad.checkState(form)
    for s in selects:
        s.checkState(form)
    for t in texts:
        t.checkState(form)

#Generate the actual HTML form and draw all the input elements

print TAB(2)+'<form action="index.cgi" method="post" style="display:inline" id="theForm">'

print TAB(3)+'<table>'
print TAB(4)+'<tr>'
print TAB(5)+'<td>'

#PDFset and size of points
print TAB(6)+'Choose PDF set:<br/>'
radios[0].draw(6)
print TAB(6)+'<br/>\n'
print TAB(6)+'Size of data points:<br/>'
radios[1].draw(6)

print TAB(5)+'</td>\n'

#Experiment IDs
print TAB(5)+'<td>'
print TAB(6)+'Experiments to include:<br/>'

print TAB(6)+'<table>'

print TAB(7)+'<tr>'
print TAB(8)+'<td style="width:20%;border:none">'
boxes[0].draw(9)
print TAB(8)+'</td>'
print TAB(7)+'</tr>\n'

print TAB(7)+'<tr>'
print TAB(8)+'<td style="width:20%;border:none">'
for box in boxes[1:int(exp_boxes/4)]:
    box.draw(9)
    print TAB(9)+'<br/>'
print TAB(8)+'</td>'
print TAB(8)+'<td style="width:20%;border:none">'
for box in boxes[int(exp_boxes/4):int(exp_boxes/2)]:
    box.draw(9)
    print TAB(9)+'<br/>'
print TAB(8)+'</td>'
print TAB(8)+'<td style="width:20%;border:none">'
for box in boxes[int(exp_boxes/2):int(3*exp_boxes/4)]:
    box.draw(9)
    print TAB(9)+'<br/>'
print TAB(8)+'</td>'
print TAB(8)+'<td style="width:20%;border:none">'
for box in boxes[int(3*exp_boxes/4):exp_boxes]:
    box.draw(9)
    print TAB(9)+'<br/>'
print TAB(8)+'</td>'
print TAB(7)+'</tr>'

print TAB(6)+'</table>'

print TAB(5)+'</td>'
print TAB(4)+'</tr>'
print TAB(3)+'</table>\n'

print TAB(3)+'<table>'
print TAB(4)+'<tr>'
print TAB(5)+'<td>'

print TAB(6)+'Figures to plot:<br/><br/>\n'
print TAB(6)+'<table>'

print TAB(7)+'<tr>'
for box in boxes[exp_boxes:exp_boxes+fig_boxes]:
    print TAB(8)+'<td style="width: 17%">'
    box.draw(9)
    print TAB(8)+'</td>'
print TAB(7)+'</tr>\n'

print TAB(7)+'<tr>'
print TAB(8)+'<td style="visibility:hidden"></td>'
for s in range(0,5):
    if not boxes[exp_boxes+1+s].getState():
        print TAB(8)+'<td class="highlight%d fadeOut"><span>'%(s)

    else:
        print TAB(8)+'<td class="highlight%d fadeIn"><span>'%(s)
    print TAB(9)+'Highlight mode:<br/>'
    selects[s].draw(9)
    print TAB(8)+'</span></td>'
print TAB(7)+'</tr>\n'

print TAB(7)+'<tr>'
print TAB(8)+'<td style="visibility:hidden"></td>'
for t in range(5):
    if not boxes[exp_boxes+1+t].getState():
        print TAB(8)+'<td class="highlight%d fadeOut"><span>'%(t)

    else:
        print TAB(8)+'<td class="highlight%d fadeIn"><span>'%(t)
    print TAB(9)+'Input range of values:<br/>'
    texts[4*t].draw(9)
    print TAB(9)+'<br/>'
    texts[4*t +1].draw(9)

    print TAB(9)+'<br/>'
    print TAB(8)+'</span></td>'
print TAB(7)+'</tr>'

print TAB(7)+'<tr>'
print TAB(8)+'<td style="visibility:hidden"></td>'
for t in range(5):
    if not boxes[exp_boxes+1+t].getState():
        print TAB(8)+'<td class="highlight%d fadeOut"><span>'%(t)

    else:
        print TAB(8)+'<td class="highlight%d fadeIn"><span>'%(t)

    print TAB(9)+'Input range of percentages:<br/>'
    texts[4*t +2].draw(9)
    print TAB(9)+'<br/>'
    texts[4*t +3].draw(9)
    print TAB(8)+'</span></td>'
print TAB(7)+'</tr>'

print TAB(6)+'</table>'
print TAB(5)+'</td>'
print TAB(4)+'</tr>'
print TAB(3)+'</table>\n'

print TAB(3)+'<table>'

print TAB(4)+'<tr>'
print TAB(5)+'<td>'
print TAB(6)+'Functions to use in correlations:<br/><br/>\n'
print TAB(6)+'<table>'
print TAB(7)+'<tr>'

for box in boxes[exp_boxes+fig_boxes:exp_boxes+fig_boxes+func_boxes]:
    print TAB(8)+'<td>'
    box.draw(9)
    print TAB(9)+'<br/>'
    print TAB(8)+'</td>'

print TAB(7)+'</tr>'
print TAB(6)+'</table>\n'

if not boxes[exp_boxes+fig_boxes+func_boxes-1].getState():
    print TAB(6)+'<table class="user fadeOut">'
else:
    print TAB(6)+'<table class="user fadeIn">'
print TAB(7)+'<tr>'
print TAB(8)+'<td>'
texts[20].draw(9)
print TAB(9)+'<br/><br/>'
texts[21].draw(9)
print TAB(8)+'</td>'
print TAB(7)+'</tr>'
print TAB(6)+'</table>\n'

print TAB(5)+'</td>'
print TAB(4)+'</tr>'
print TAB(3)+'</table>\n'

print TAB(3)+'<table>'
print TAB(4)+'<tr>'


print TAB(5)+'<td>'
print "Data plot X range:<br/>"
boxes[exp_boxes+fig_boxes+func_boxes].draw(6)
print TAB(6)+'<br/><br/>'
if boxes[exp_boxes+fig_boxes+func_boxes].getState():
    print "<span class='auto1 fadeOut'>"
else:
    print "<span class='auto1 fadeIn'>"
texts[22].draw(6)
print TAB(6)+'<br/><br/>'
texts[23].draw(6)
print TAB(6)+'<br/>'
print TAB(5)+'</span></td>'

print TAB(5)+'<td>'
print "Data plot &#x03bc; range:<br/>"
boxes[exp_boxes+fig_boxes+func_boxes+1].draw(6)
print TAB(6)+'<br/><br/>'
if boxes[exp_boxes+fig_boxes+func_boxes+1].getState():
    print "<span class='auto2 fadeOut'>"
else:
    print "<span class='auto2 fadeIn'>"
texts[24].draw(6)
print TAB(6)+'<br/><br/>'
texts[25].draw(6)
print TAB(6)+'<br/>'
print TAB(5)+'</span></td>'

print TAB(5)+'<td>'
print "Histogram data range:<br/>"
boxes[exp_boxes+fig_boxes+func_boxes+2].draw(6)
print TAB(6)+'<br/><br/>'
if boxes[exp_boxes+fig_boxes+func_boxes+1].getState():
    print "<span class='auto3 fadeOut'>"
else:
    print "<span class='auto3 fadeIn'>"
texts[26].draw(6)
print TAB(6)+'<br/>'
print TAB(5)+'</span></td>'

print TAB(5)+'<td>'
print "Histogram X range:<br/>"
boxes[exp_boxes+fig_boxes+func_boxes+3].draw(6)
print TAB(6)+'<br/><br/>'
if boxes[exp_boxes+fig_boxes+func_boxes+1].getState():
    print "<span class='auto4 fadeOut'>"
else:
    print "<span class='auto4 fadeIn'>"
texts[27].draw(6)
print TAB(6)+'<br/><br/>'
texts[28].draw(6)
print TAB(6)+'<br/>'
print TAB(5)+'</span></td>'


print TAB(4)+'</tr>'
print TAB(3)+'</table>'

#Reset and submit buttons
print "<br/>"
buttons[0].draw(2)
print "&nbsp;"
print TAB(2)+'</form>'
buttons[1].draw(2)
print TAB(2)+'<br/><br/><br/>\n'

#The complicated part
#If a form has been submitted - this not is the first time the page is being loaded
if len(form) != 0:

    #Write the Mathematica configuration file
    jobID = makeConfig(boxes,radios,texts,selects,expids)

    #Check if the graph being requested has already been generated and stored

    #Check if the plot is there
    path = OUTPUT+jobID
    images = sorted(glob.glob(path+"/*.png"))
    #print len(images)
    #print 1+boxes[exp_boxes+1].getState()
    if len(images) != 0:
        #If it is, display and nicely format the generated images
        print TAB(2)+"<img src='%s'/><br/>"%(JS_PREFIX+OUTPUT+jobID+"/exptname_table.png")
        print "<a href='%s'>Download configuration file</a>"%(JS_PREFIX+CONFIG)

        print "<table style='width:100%'><tr>"
        for image in images:
            if "_xQ" in image:
                print "<td style='width:3000px;border:none'>"
                print TAB(2)+"<img style='width:100%' src='"+JS_PREFIX+image+"'/><br/>\n"
                print "<a href='../mathscript_v16/"+JS_PREFIX+image+"'>View full image</a></td>"
        print "</tr><br/><tr>"

        print "</tr></table>"

        print "<table style='width:50%'><tr>"

        for image in images:
            if "_legend" in image:
                print "<td style='border:none'>"
                print TAB(2)+"<img style='width:100%' src='"+JS_PREFIX+image+"'/><br/>\n"
                print "<a href='../mathscript_v16/"+JS_PREFIX+image+"'>View full image</a></td>"
        print "</tr><br/><tr>"

        for image in images:
            if "_hist1" in image:
                print "<td style='border:none'>"
                print TAB(2)+"<img style='width:100%' src='"+JS_PREFIX+image+"'/><br/>\n"
                print "<a href='../mathscript_v16/"+JS_PREFIX+image+"'>View full image</a></td>"
        print "</tr><br/><tr>"

        for image in images:
            if "_hist2" in image:
                print "<td style='border:none'>"
                print TAB(2)+"<img style='width:100%' src='"+JS_PREFIX+image+"'/><br/>\n"
                print "<a href='../mathscript_v16/"+JS_PREFIX+image+"'>View full image</a></td>"
        print "<br/>"

        print "</tr></table>"
    else:
        #Check for the presence of the lockfile
        present = glob.glob(MATH+"lock")
        if len(present) == 0:
            #If it isn't there, run the program
            makeGraph(jobID)
            #pass
        else:
            #Otherwise, read the job ID of the lockfile
            lockfile = file(MATH+'lock','r')
            prevID = lockfile.readline()[:-1]
            lockfile.close()

            #See if an output with the corresponding ID already exists, and if it does, delete the lockfile and generate the new graph
            prevPath = OUTPUT+prevID+IMAGE
            if len(glob.glob(prevPath)) != 0:
                os.system('rm '+MATH+'lock')
                makeGraph(jobID)
                #pass
            else:
                #If not, assume another process is running and wait until an output with the lockfile ID has been generated, then reload the page
                #print TAB(2)+"<img id='graph' src='%sstate_busy.jpg'/><br/>\n"%ASSETS
                print TAB(2)+"<h3 id='graph'>Waiting for another request to finish...</h3><br/>\n"
                print TAB(2)+'<script>var loop = setInterval(function() { if (UrlExists("%s")) { clearInterval(loop); location.reload();} }, 3000);</script>'%(JS_PREFIX+prevPath)

else:
    #If the page IS being loaded for the first time...
    #TODO: Create a 'history' box of previous requests
    #print TAB(2)+"<img id='graph' src='%sstate_default.jpg'/><br/>\n"%ASSETS
    print TAB(2)+"Plots will be displayed here<br/><br/>\n"
    #pass

print TAB(1)+'</body>'
print '</html>'
